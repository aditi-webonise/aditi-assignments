Here are some git commands:

Set your details:

git config --global user.name "John Doe"
git config --global user.email "john@example.com"

Use --global to set the configuration for all projects. If git config is used without --global and run inside a project directory, the settings are set for the specific project.
Make git ignore file modes

cd project/
git config core.filemode false


See your settings
git config --list

Initialize a git repository for existing code
cd existing-project/
git init

Clone a remote repository
git clone https://github.com/user/repository.git

Get help for a specific git command
git help clone

Update and merge your current branch with a remote
cd repository/
git pull origin master
Where origin is the remote repository, and master the remote branch.
If you don't want to merge your changes, use git fetch

View remote urls
git remote -v

Change origin url
git remote set-url origin http//github.com/repo.git

Add remote
git remote add remote-name https://github.com/user/repo.git

See non-staged (non-added) changes to existing files
git diff

See staged, non-commited changes
git diff --cached

See differences between local changes and master
git diff origin/master

See differences between two commits
git diff COMMIT1_ID COMMIT2_ID

See the files changed between two commits
git diff --name-only COMMIT1_ID COMMIT2_ID

See the files changed in a specific commit
git diff-tree --no-commit-id --name-only -r COMMIT_ID

or

git show --pretty="format:" --name-only COMMIT_ID

See diff before push
git diff --cached origin/master

See details (log message, text diff) of a commit
git show COMMIT_ID

Check the status of the working tree (current branch, changed files...)
git status

Make some changes, commit them

git add changed_file.txt
git add folder-with-changed-files/
git commit -m "Commiting changes"

Rename/move and remove files

git rm removeme.txt tmp/crap.txt
git mv file_oldname.txt file_newname.txt
git commit -m "deleting 2 files, renaming 1"

Change message of last commit
git commit --amend -m "New commit message"

Push local commits to remote branch
git push origin master

See recent commit history
git log

See commit history for the last two commits
git log -2

See commit history for the last two commits, with diff
git log -p -2

See commit history printed in single lines
git log --pretty=oneline

Revert one commit, push it

git revert dd61ab21
git push origin master

Revert to the moment before one commit

# reset the index to the desired tree
git reset 56e05fced

# move the branch pointer back to the previous HEAD
git reset --soft HEAD@{1}
git commit -m "Revert to 56e05fced"

# Update working copy to reflect the new commit
git reset --hard


Undo last commit, preserving local changes
git reset --soft HEAD~1

Undo last commit, without preserving local changes
git reset --hard HEAD~1

Undo last commit, preserving local changes in index
git reset --mixed HEAD~1

Or git reset HEAD~1

Undo non-pushed commits
git reset origin/master

Reset to remote state
git fetch origin
git reset --hard origin/master

See local branches
git branch

See all branches
git branch -a

Make some changes, create a patch
git diff > patch-issue-1.patch

Add a file and create a patch

git add newfile
git diff --staged > patch-issue-2.patch

Add a file, make some changes, and create a patch

git add newfile
git diff HEAD > patch-issue-2.patch

Create a tag
git tag 7.x-1.3

Push a tag
git push origin 7.x-1.3

Create a branch

git branch branchname 
or
git checkout -b branchname 

Checkout a branch
git checkout new-branch-name

See commit history for just the current branch
git cherry -v master


Merge branch commits
git checkout master
git merge branch-name

Here we are merging all commits of branch-name to master.
Merge a branch without committing

git merge branch-name --no-commit --no-ff

See differences between the current state and a branch
git diff branch-name

See differences in a file, between the current state and a branch
git diff branch-name path/to/file

Delete a branch
git branch -d new-branch-name

Push the new branch
git push origin new-branch-name

Get all branches
git fetch origin

Get the git root directory
git rev-parse --show-toplevel

Remove from repository all locally deleted files
git rm $(git ls-files --deleted)


Delete all untracked files
git clean -f

Including directories:
git clean -f -d

Preventing sudden cardiac arrest:
git clean -n -f -d

Delete all files from a git repository that have already been deleted from disk:
git ls-files --deleted -z | xargs -0 git rm



